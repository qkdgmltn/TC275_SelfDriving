/**********************************************************************************************************************
 * \file encoder.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

#include "Encoder.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/
uint32 Left_DataA, Left_DataB, Left_DataAB;
uint32 Right_DataA, Right_DataB, Right_DataAB;

uint32 Left_DataAB_prev, Left_CntAB = 0;
uint32 Right_DataAB_prev, Right_CntAB = 0;

float32 Left_theta, Right_theta;

uint32 Left_Pos_deg, Right_Pos_deg;
float32 Left_Pos_rad, Right_Pos_rad;

extern float32 Left_velocity, Right_velocity;

float32 Left_Pos_rad_prev, Left_velocity_prev, Left_velocity_rpm;
float32 Right_Pos_rad_prev, Right_velocity_prev, Right_velocity_rpm;


/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Encoder_init(void)
{
    IfxPort_setPinModeInput(Encoder_right_A, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(Encoder_right_B, IfxPort_InputMode_pullDown);

    IfxPort_setPinModeInput(Encoder_left_A, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(Encoder_left_B, IfxPort_InputMode_pullDown);
}

void Encoder_cnt_left(void){

    Left_DataA = IfxPort_getPinState(Encoder_left_A);
    Left_DataB = IfxPort_getPinState(Encoder_left_B);
    Left_DataAB = (Left_DataA << 1) | Left_DataB;

    if(Left_DataAB == 0){
        if(Left_DataAB_prev == 1){
            Left_CntAB++;
        }
        if(Left_DataAB_prev == 2){
            Left_CntAB--;
        }
    }
    else if(Left_DataAB == 1){
        if(Left_DataAB_prev == 3){
            Left_CntAB++;
        }
        if(Left_DataAB_prev == 0){
            Left_CntAB--;
        }
    }
    else if(Left_DataAB == 2){
        if(Left_DataAB_prev == 0){
            Left_CntAB++;
        }
        if(Left_DataAB_prev == 3){
            Left_CntAB--;
        }
    }
    else if(Left_DataAB == 3){
        if(Left_DataAB_prev == 2){
            Left_CntAB++;
        }
        if(Left_DataAB_prev == 1){
            Left_CntAB--;
        }
    }

    Left_DataAB_prev = Left_DataAB;

    Left_Pos_rad = Left_CntAB * 2 * 3.141592 / 48;
    Left_Pos_deg = (uint32)(Left_CntAB * 360 / 48);

    Left_theta = Left_Pos_rad;

}

void Encoder_cnt_right(void){

    Right_DataA = IfxPort_getPinState(Encoder_right_A);
    Right_DataB = IfxPort_getPinState(Encoder_right_B);
    Right_DataAB = (Right_DataA << 1) | Right_DataB;

    if(Right_DataAB == 0){
        if(Right_DataAB_prev == 1){
            Right_CntAB++;
        }
        if(Right_DataAB_prev == 2){
            Right_CntAB--;
        }
    }
    else if(Right_DataAB == 1){
        if(Right_DataAB_prev == 3){
            Right_CntAB++;
        }
        if(Right_DataAB_prev == 0){
            Right_CntAB--;
        }
    }
    else if(Right_DataAB == 2){
        if(Right_DataAB_prev == 0){
            Right_CntAB++;
        }
        if(Right_DataAB_prev == 3){
            Right_CntAB--;
        }
    }
    else if(Right_DataAB == 3){
        if(Right_DataAB_prev == 2){
            Right_CntAB++;
        }
        if(Right_DataAB_prev == 1){
            Right_CntAB--;
        }
    }

    Right_DataAB_prev = Right_DataAB;

    Right_Pos_rad = Right_CntAB * 2 * 3.141592 / 48;
    Right_Pos_deg = (uint32)(Right_CntAB * 360 / 48);

    Right_theta = Right_Pos_rad;

}


void velocity_cal_left(void){
    Left_velocity = (Left_Pos_rad - Left_Pos_rad_prev)/0.001;

    Left_velocity = LPF(Left_velocity_prev, Left_velocity, 0.001, 200);

    Left_velocity_prev = Left_velocity;

    Left_velocity_rpm = (uint32)(60*Left_velocity/(2*3.141592));

    Left_Pos_rad_prev = Left_Pos_rad;
}

void velocity_cal_right(void){
    Right_velocity = (Right_Pos_rad - Right_Pos_rad_prev)/0.001;

    Right_velocity = LPF(Right_velocity_prev, Right_velocity, 0.001, 200);

    Right_velocity_prev = Right_velocity;

    Right_velocity_rpm = (uint32)(60*Right_velocity/(2*3.141592));

    Right_Pos_rad_prev = Right_Pos_rad;
}
