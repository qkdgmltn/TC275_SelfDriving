/**********************************************************************************************************************
 * \file encoder.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

#include "Encoder.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/
uint32 DataA, DataB, DataAB;
uint32 DataAB_prev, CntAB = 0;

uint32 DataA2, DataB2, DataAB2;
uint32 DataAB_prev2, CntAB2 = 0;
//extern int Pos_rad_prev, velocity;

float32 right_theta, left_theta;
int Pos_deg, Pos_deg2;
float32 Pos_rad, Pos_rad2;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Encoder_init(void)
{
    IfxPort_setPinModeInput(Encoder_right_A, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(Encoder_right_B, IfxPort_InputMode_pullDown);

    IfxPort_setPinModeInput(Encoder_left_A, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(Encoder_left_B, IfxPort_InputMode_pullDown);
}

void Encoder_cnt(void){

    DataA = IfxPort_getPinState(Encoder_right_A);
    DataB = IfxPort_getPinState(Encoder_right_B);
    DataAB = (DataA << 1) | DataB;

    if(DataAB == 0){
        if(DataAB_prev == 1){
            CntAB++;
        }
        if(DataAB_prev == 2){
            CntAB--;
        }
    }
    else if(DataAB == 1){
        if(DataAB_prev == 3){
            CntAB++;
        }
        if(DataAB_prev == 0){
            CntAB--;
        }
    }
    else if(DataAB == 2){
        if(DataAB_prev == 0){
            CntAB++;
        }
        if(DataAB_prev == 3){
            CntAB--;
        }
    }
    else if(DataAB == 3){
        if(DataAB_prev == 2){
            CntAB++;
        }
        if(DataAB_prev == 1){
            CntAB--;
        }
    }

//    if(CntAB < 10){
//        c = '0' + CntAB;
//    }
//
//    _out_uart3(c);
//    _out_uart3('\n');

    DataAB_prev = DataAB;

    Pos_rad = CntAB * 2 * 3.141592 / 48;
    Pos_deg = (int)(CntAB * 360 / 48);

    right_theta = Pos_rad;

}

void Encoder_right(void){

    DataA2 = IfxPort_getPinState(Encoder_left_A);
    DataB2 = IfxPort_getPinState(Encoder_left_B);
    DataAB2 = (DataA2 << 1) | DataB2;

    if(DataAB2 == 0){
        if(DataAB_prev2 == 1){
            CntAB2++;
        }
        if(DataAB_prev2 == 2){
            CntAB2--;
        }
    }
    else if(DataAB2 == 1){
        if(DataAB_prev2 == 3){
            CntAB2++;
        }
        if(DataAB_prev2 == 0){
            CntAB2--;
        }
    }
    else if(DataAB2 == 2){
        if(DataAB_prev2 == 0){
            CntAB2++;
        }
        if(DataAB_prev2 == 3){
            CntAB2--;
        }
    }
    else if(DataAB2 == 3){
        if(DataAB_prev2 == 2){
            CntAB2++;
        }
        if(DataAB_prev2 == 1){
            CntAB2--;
        }
    }

//    if(CntAB < 10){
//        c = '0' + CntAB;
//    }
//
//    _out_uart3(c);
//    _out_uart3('\n');

    DataAB_prev2 = DataAB2;

    Pos_rad2 = CntAB2 * 2 * 3.141592 / 48;
    Pos_deg2= (int)(CntAB2 * 360 / 48);

    left_theta = Pos_rad2;

}
